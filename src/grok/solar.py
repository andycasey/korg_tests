
import numpy as np

periodic_table = ["H","He","Li","Be","B","C","N","O","F","Ne",
    "Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca",
    "Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn",
    "Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr",
    "Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn",
    "Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd",
    "Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb",
    "Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg",
    "Tl","Pb","Bi","Po","At","Rn","Fr","Ra","Ac","Th",
    "Pa","U"]
    

class SolarAbundances(object):

    @property
    def as_dict(self):
        return dict(zip(periodic_table, self.as_array))
    
    @property
    def as_array(self):
        data = self.__data__
        non_finite = ~np.isfinite(data)
        if np.any(non_finite):
            # look up the MRO for finite values
            for mro in self.__class__.__mro__[1:]:
                data[non_finite] = mro.__data__[non_finite]
                non_finite = ~np.isfinite(data)
                if not np.any(non_finite):
                    break
        return data

    @property
    def citation(self):
        return self.__citation__

    

class Asplund2009(SolarAbundances):
    
    __citation__ = "Asplund et al. (2009, Ann. Rev. Ast. Ap., 47, 481)."
    __data__ = np.array([
        12.00,10.93, 1.05, 1.38, 2.70, 8.43, 7.83, 8.69, 4.56, 7.93,
        6.24, 7.60, 6.45, 7.51, 5.41, 7.12, 5.50, 6.40, 5.03, 6.34,
        3.15, 4.95, 3.93, 5.64, 5.43, 7.50, 4.99, 6.22, 4.19, 4.56,
        3.04, 3.65, 2.30, 3.34, 2.54, 3.25, 2.52, 2.87, 2.21, 2.58,
        1.46, 1.88,-5.00, 1.75, 0.91, 1.57, 0.94, 1.71, 0.80, 2.04,
        1.01, 2.18, 1.55, 2.24, 1.08, 2.18, 1.10, 1.58, 0.72, 1.42,
        -5.00, 0.96, 0.52, 1.07, 0.30, 1.10, 0.48, 0.92, 0.10, 0.84,
        0.10, 0.85,-0.12, 0.85, 0.26, 1.40, 1.38, 1.62, 0.92, 1.17,
        0.90, 1.75, 0.65,-5.00,-5.00,-5.00,-5.00,-5.00,-5.00, 0.02,
        -5.00,-0.54])    


class Asplund2020(SolarAbundances):

    __citation__ = "Asplund et al. A&A 653, A141 (2021)"
    __data__ = np.array([
        12.00,  10.91, 0.96,  1.38,  2.70,  8.46,  7.83,  8.69,  4.40, 8.06,
         6.22,  7.55,  6.43,  7.51,  5.41,  7.12,  5.31,  6.38,  5.07, 6.30,
         3.14,  4.97,  3.90,  5.62,  5.42,  7.46,  4.94,  6.20,  4.18, 4.56,
         3.02,  3.62,  2.30,  3.34,  2.54,  3.12,  2.32,  2.83,  2.21, 2.59,
         1.47,  1.88, -5.00,  1.75,  0.78,  1.57,  0.96,  1.71,  0.80, 2.02,
         1.01,  2.18,  1.55,  2.22,  1.08,  2.27,  1.11,  1.58,  0.75, 1.42,
        -5.00,  0.95,  0.52,  1.08,  0.31,  1.10,  0.48,  0.93,  0.11, 0.85,
         0.10,  0.85, -0.15,  0.79,  0.26,  1.35,  1.32,  1.61,  0.91, 1.17,
         0.92,  1.95,  0.65, -5.00, -5.00, -5.00, -5.00, -5.00, -5.00, 0.03,
        -5.00, -0.54
    ])



class Grevesse2007(SolarAbundances):

    __citation__ = "Grevesse et al. Space Sci Rev (2007) 130: 105â€“114"
    __data__ = np.array([
        12.00,  10.93,  1.10,  1.40,  2.79,  8.41,  7.80,  8.66,  4.48,  8.08,  
         6.33,   7.58,  6.47,  7.55,  5.45,  7.33,  5.28,  6.40,  5.12,  6.36,  
         3.17,   5.02,  4.00,  5.67,  5.39,  7.50,  4.92,  6.25,  4.21,  4.60,  
         2.88,   3.41,  2.37,  3.41,  2.63,  3.31,  2.60,  2.97,  2.24,  2.60,  
         1.42,   1.92, -5.0,   1.84,  1.12,  1.69,  1.24,  1.77,  0.82,  2.00,  
         1.00,   2.24,  1.51,  2.17,  1.13,  2.13,  1.17,  1.58,  0.71,  1.50, 
        -5.0,   1.01,   0.51,  1.12,  0.35,  1.14,  0.51,  0.93,  0.15,  1.08,  
         0.06,   0.88, -0.13,  0.69,  0.28,  1.45,  1.35,  1.80,  0.85,  1.13,  
         0.83,   1.95,  0.71, -5.0,  -5.0,  -5.0,  -5.0,   -5.0, -5.0,   0.09, 
        -5.0,  -0.50
    ])


class Magg2022(Asplund2020):

    __citation__ = "Magg et al. (2022) A&A 661, A140"
    __data_dict__ = {
        "H": 12.0,
        "C": 8.56,
        "N": 7.98,
        "O": 8.77,
        "F": 4.40,
        "Ne": 8.15,
        "Na": 6.29,
        "Mg": 7.55,
        "Al": 6.43,
        "Si": 7.59,
        "P": 5.41,
        "S": 7.16,
        "Cl": 5.25,
        "Ar": 6.50,
        "K": 5.14,
        "Ca": 6.37,
        "Sc": 3.07,
        "Ti": 4.94,
        "V": 3.89,
        "Cr": 5.74,
        "Mn": 5.52,
        "Fe": 7.50,
        "Co": 4.95,
        "Ni": 6.24,
    }

    __data__ = np.nan * np.ones(92)
    for element, abundance in __data_dict__.items():
        __data__[periodic_table.index(element)] = abundance




if __name__ == "__main__":

    foo = Magg2022()
    #foo.abundances